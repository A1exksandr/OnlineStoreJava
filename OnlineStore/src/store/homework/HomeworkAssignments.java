package store.homework;

/**
 * Это твои домашние задания.
 * Всё, что тебе нужно сделать — открыть этот файл, прочитать задачки
 * и реализовать их в коде проекта.
 */
public class HomeworkAssignments {

    /*
     ============================
     =         GENERICS        =
     ============================
     1) Задание (простое):
        Создай класс GenericOrder<T>:
         - У тебя должно быть поле private List<T> items;
         - Методы addItem(T item) и removeItem(T item);
         - И, конечно, printOrder() для вывода содержимого списка в консоль.
        Применяй этот класс для хранения, например, Product или User.
        Смысл в том, чтобы сделать универсальный "заказ", куда можно добавлять любые объекты.

     2) Задание (среднее):
        Определи интерфейс SearchCriteria<T> с методом boolean match(T item).
        В своем классе Repository<T> (или новом классе, если так удобнее):
         - Добавь метод List<T> findAll(SearchCriteria<T> criteria),
           который вернёт все объекты, удовлетворяющие этому критерию.
         - Напиши пару реализаций SearchCriteria (например, поиск продуктов
           по категории, по названию и т.д.).
        Проверь в main, что поиск действительно работает, и выведи результаты.

     3) Задание (сложное):
        Реализуй класс MultiRepository<K, V>, где:
         - K — это ключ (String, Integer, UUID — на твой выбор),
         - V — это объект (Product, User, что угодно).
         - Внутри используй Map<K, V> (HashMap, TreeMap — выбирай).
         - Обязательно методы add(K key, V value), remove(K key), get(K key).
         - Добавь findAll(SearchCriteria<V> criteria) (по аналогии с заданием 2).
        Покажи в проекте, как это всё работает. Оцени, насколько гибким стал код.
     */


    /*
     ============================
     =        INTERFACES       =
     ============================
     1) Задание (простое):
        Создай интерфейс Discountable с методом double applyDiscount(double price).
        Придумай разные классы, которые его реализуют:
         - SeasonDiscount (падает цена на N%),
         - LoyaltyDiscount (например, скидка в зависимости от "стажа" пользователя).
        После этого в Cart.getTotalCost() (или другом месте, связанном с покупкой)
        попробуй применить твои скидки для уменьшения итоговой цены.

     2) Задание (среднее):
        Создай интерфейс Notifiable с методом void notify(String message).
        Пусть будут разные реализации:
         - EmailNotification (шлёт письма),
         - SmsNotification (шлёт SMS-ки),
         - PushNotification (пуш-уведомления).
        В классах AdminUser, GuestUser, ManagerUser добавь поле Notifiable,
        указывающее, как конкретно пользователь хочет получать уведомления.
        В Store.main (или где у тебя логика) покажи, как отправлять пользователю сообщения.

     3) Задание (сложное):
        Определи интерфейс OrderProcessing с методами:
         - validateOrder(Order order);
         - payOrder(Order order);
         - shipOrder(Order order);
        Создай минимум две реализации:
         - SimpleOrderProcessing (просто выводит в консоль "Заказ валидирован/оплачен/отгружен");
         - AdvancedOrderProcessing (более детальная логика: проверка товаров на складе,
           выброс исключений при проблемах, взаимодействие с сервисами оплаты и т.д.).
        Потом подмени одну реализацию на другую — оцени, как сильно меняется остальной код.
     */


    /*
     ============================
     =       COLLECTIONS       =
     ============================
     1) Задание (простое):
        Сделай класс UserManager с коллекцией (List<User>):
         - addUser(User user),
         - removeUser(User user),
         - findUserByEmail(String email),
         - printAllUsers().
        Добавь туда разных пользователей (AdminUser, GuestUser, ManagerUser)
        и проверь в main, что всё работает, как нужно.

     2) Задание (среднее):
        Реализуй InventoryManager, который хранит остатки товаров:
         - Map<Product, Integer> (HashMap, например).
         - addProduct(Product p, int quantity) — если товар уже есть, количество растёт;
         - removeProduct(Product p, int quantity) — если на складе не хватает товара,
           бросай собственное исключение (см. задание ниже по исключениям);
         - getStockCount(Product p) — получить текущее число единиц товара.
        Перед оформлением покупки проверяй, есть ли товар в нужном количестве.

     3) Задание (сложное):
        Сделай класс CategoryManager для управления категориями товаров:
         - Set<String> (HashSet или TreeSet), чтобы хранить уникальные категории,
         - addCategory(String category), removeCategory(String category),
           isCategoryExists(String category), printAllCategories().
        Чтобы связать это с Product, можешь при создании товара сразу добавлять
        его категорию в CategoryManager.
     */


    /*
     ============================
     =       ИСКЛЮЧЕНИЯ        =
     ============================
     Задание:
        Напиши своё исключение OutOfStockException (унаследуй от Exception или RuntimeException).
        В классе InventoryManager (из задания выше) при попытке снять со склада больше товара,
        чем есть, кидай OutOfStockException.
        В месте, где у тебя происходит покупка (Store, Cart или где-то ещё),
        перехвати OutOfStockException и выведи понятное сообщение пользователю
        (например: "Недостаточно товара: не хватает 3 штук").
        Можешь хранить в исключении информацию о товаре и количестве, которого не хватило.
     */


    // Немного «заглушки», чтобы класс мог компилироваться без жалоб.
    public static void main(String[] args) {
        System.out.println("Открой HomeworkAssignments.java, чтобы посмотреть задания!");
    }
}
